# which is the number of minutes in two days
minutes_in_two_days <- double(minutes_in_a_day)
# Write a function `cube()` that takes in a value and returns that value cubed
cube <- function(number) {
number^3
}
# Create a variable `twenty_seven` by passing 3 to your `cube()` function
twenty_seven <- cube(3)
# Create a function `inches_to_cm` that converts from inches to centimeters
inches_to_cm <- function(inch) {
inch * 2.54
}
# Create a variable `inches_tall` that is your (numeric) height in inches
inches_tall <- 62.3
# Using your `inches_to_cm` function and your `inches_tall` variable,
# create a variable `cm_tall` that is your height in centimeters
cm_tall <- inches_to_cm(inches_tall)
# Write a function `has_more_zs` to determine which of two strings contains
# more instances of the letter "z". It should take as parameters two string
# variables, and return the argument which has more occurances of the letter "z"
# If neither phrase contains the letter "z", it should return:
# "Neither string contains the letter z."
# If the phrases contain the same number of "z"s, it should return:
# "The strings have the same number of Zs."
# The function must work for both capital and lowercase "z"s.
has_more_zs <- function(first_word, second_word) {
count_first_word <- str_count(tolower(first_word), "z")
count_second_word <- str_count(tolower(second_word), "z")
if (count_first_word == 0 && count_second_word == 0) {
"Neither string contains the letter z."
} else if (count_first_word == count_second_word) {
"The strings have the same number of Zs."
} else if (count_first_word > count_second_word) {
first_word
} else {
second_word
}
}
# Create a variable `more_zs` by passing two strings of your choice to your
# `has_more_zs` function
more_zs <- has_more_zs("Zebra", "Lion")
# Write a function `remove_digits` that will remove all digits
# (i.e., 0 through 9) from all elements in a *vector of strings*.
remove_digits <- function(string_vector) {
x <- gsub("[0-9]+", "", string_vector)
x
}
# Demonstrate that your approach is successful by passing a vector of courses
# to your function. For example, remove_digits(c("INFO 201", "CSE 142"))
remove_digits(c("INFO 201", "CSE 142"))
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies <- c("Love, Rosie", "Joker", "Iron Man", "The Avengers", "Thor", "Venom")
# Create a vector `top_three` that only contains the first three movies
# You should do this by subsetting the vector, not by simply retyping the movies
top_three <- movies[1:3]
# Using your vector and the `paste()` method, create a vector `excited` that
# adds the phrase - " is a great movie!" to the end of each element `movies`
excited <- paste(movies, " is a great movies!", sep = " ")
# Create a vector `without_four` by omitting the fourth element from `movies`
# You should do this using a _negative index_
without_four <- movies[-4]
# Create a vector `multiples_of_4` that is every number divisible by 4
# between 4 and 400 (**2 points**)
multiples_of_4 <- seq(4, 400, 4)
# Create a vector `multiples_of_8` by filtering your `multiples_of_4` variable
# down to only elements that are divisible by 8.
multiples_of_8 <- multiples_of_4[multiples_of_4 %% 8 == 0]
# Create a vector `numbers` that is the numbers 700 through 999
numbers <- seq(700, 999)
# Using the built in `length()` function, create a variable `numbers_len`
# that is equal to the length of your vector `numbers`
numbers_len <- length(numbers)
# Using the `mean()` function, create a variable `numbers_mean` that is
# equal to the mean of your vector `numbers`
numbers_mean <- mean(numbers)
# Using the `median()` function, create a variable `numbers_median`
# that is the median of your vector `numbers`
numbers_median <- median(numbers)
# Create a vector `lower_numbers` that the values in your `numbers` vector
# that are lower than `numbers_mean` (you should do this using vector filtering)
lower_numbers <- numbers[numbers < numbers_mean]
# Create a vector `higher_numbers` that the values in your `numbers` vector
# that are higher than `numbers_mean` (again, using vector filtering)
high_numbers <- numbers[numbers > numbers_mean]
# Lists ------------------------------------------------------------------------
# Create a list called `summary_info` in which you'll store summary information
# about the `numbers` vector above. The list should have the following keys:
# - `length`: in which you'll store the length of the vector
# - `mean`: in which you'll store the mean of the vector
# - `median`: in which you'll store the median of the vector
summary_info <- list(
length = numbers_len,
mean = numbers_mean,
median = numbers_median
)
# Now, write a function called `summarize_vector` that takes in a vector of
# numbers, and returns a list of summary information about that vector
# (including the mean, median, and length)
summarize_vector <- function(vector_of_numbers) {
vector_info <- list(
length = length(vector_of_numbers),
mean = mean(vector_of_numbers),
median = median(vector_of_numbers)
)
vector_info
}
# Create a variable `summary_1_to_100` by passing a vector of the values one
# through one hundred to your `summarize_vector` function
summary_1_to_100 <- summarize_vector(seq(1, 100))
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
styler:::style_selection()
lintr:::addin_lint()
install.packages("carData")
homework <- my_df <- read.csv("Florida.csv", stringsAsFactors = FALSE)
homework <- my_df <- read.csv("./carData/Florida.csv", stringsAsFactors = FALSE)
homework <- my_df <- read.csv("./carData/Florida.csv", header = TRUE, stringsAsFactors = FALSE)
homework <- my_df <- read.csv("carData/Florida.csv", header = TRUE, stringsAsFactors = FALSE)
homework <- my_df <- read.csv("carData/Florida", header = TRUE, stringsAsFactors = FALSE)
homework <- my_df <- read.csv("carData/Florida.csv", header = TRUE, stringsAsFactors = FALSE)
library(carData)
library(carData)
Florida
nrow(Florida[Florida$GORE > Florida$BUSH,])
Florida[Florida$GORE > Florida$BUSH,]
nrow(Florida[,Florida$GORE > Florida$BUSH])
nrow(Florida[GORE > BUSH,])
rownames(Florida[Florida$Total == min(Florida$Total),])
rownames(Florida[Florida$Total = max(Florida$Total),])
rownames(Florida[Florida$Total == max(Florida$Total),])
rownames(Florida$Total[Florida$Total == max(Florida$Total),])
sum(Florida[Florida$GORE > Florida$BUSH,]$NADER)
install.packages('pscl')
library(pscl)
View('presidentialElections')
library(presidentialElections)
is.data.frame(presidentialElections)
titanic_df <- data.frame(presidentialElections, stringsAsFactors = FALSE)
View(titanic_df)
View(titanic_df)
presidentialElections <- data.frame(presidentialElections, stringsAsFactors = FALSE)
View(presidentialElections)
View(presidentialElections)
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
library(dplyr)
library(dplyr)
is.data.frame(presidentialElections)
presidentialElections <- data.frame(presidentialElections, stringsAsFactors = FALSE)
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
is.data.frame(presidentialElections)
presidentialElections <- data.frame(presidentialElections, stringsAsFactors = FALSE)
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(pscl)
is.data.frame(presidentialElections)
presidentialElections <- data.frame(presidentialElections, stringsAsFactors = FALSE)
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
library(dplyr)
library(pscl)
is.data.frame(presidentialElections)
presidentialElections <- data.frame(presidentialElections, stringsAsFactors = FALSE)
presidentialElections %>%
group_by(year) %>%
summarize(value = mean(demVote))
outcome <- presidentialElections %>%
select(-south) %>%
mutate(year = paste0("demVote_", year)) %>%
spread(key = year, value = demVote)
install.packages('nycflights13')
library(nycflights13)
View(presidentialElections)
View(presidentialElections)
nycflights13 <- data.frame(nycflights13, stringsAsFactors = FALSE)
library(nycflights13)
nycflights13 <- data.frame(nycflights13, stringsAsFactors = FALSE)
airports <- data.frame(airports, stringsAsFactors = FALSE)
View(airports)
View(airports)
flights <- data.frame(flights, stringsAsFactors = FALSE)
View(flights)
View(flights)
View(summary_1_to_100)
View(presidentialElections)
View(flights)
View(airports)
lintr:::addin_lint()
styler:::style_selection()
rm(list=ls())
---
title: "Example"
author: "David Hendry"
date: "10/28/2019"
output: html_document
---
library(ggplot2)
install(ggplot2)
install.packages('ggplot2')
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
source("analysis.R")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
source("analysis.R")
View(titanic_df)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
setwd("~/Desktop/UW/Autumn\ 2019/ INFO\ 201/ a5-b-pvu-1864424")
library(ggplot2)
library(plotly)
setwd("~/Desktop/UW/Autumn 2019/INFO 201/extra-credit")
master_data <- read.csv("master.csv", stringsAsFactors = FALSE)
View(master_data)
master_data <- master_data %>%
filter(suicides_no != "0")
View(master_data)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
group_by(year) %>%
summarize(suicides_no = sum(suicides_no))
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
group_by(year) %>%
summarize(suicides_no = sum(suicides_no))
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
group_by(year) %>%
summarize(suicides_no = sum(suicides_no))
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
group_by(year) %>%
summarise(suicides_no = sum(suicides_no))
View(master_data)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex)
master_data <- read.csv("master.csv", stringsAsFactors = FALSE)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
group_by(year, sex)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
group_by(year) %>%
group_by(sex)
View(master_data)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
group_by(year)
library(dplyr)
master_data <- read.csv("master.csv", stringsAsFactors = FALSE)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
group_by(year)
library(tidyr)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
group_by(year) %>%
spread(sex, suicides_no)
master_data <- read.csv("master.csv", stringsAsFactors = FALSE)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
group_by(year) %>%
spread(suicides_no, sex)
master_data <- read.csv("master.csv", stringsAsFactors = FALSE)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
group_by(year)
master_data <- read.csv("master.csv", stringsAsFactors = FALSE)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
group_by(year) %>%
arrange(sex)
?summarise_if
master_data <- read.csv("master.csv", stringsAsFactors = FALSE)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
arrange(year)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
arrange(year) %>%
group_by(sex)
master_data <- read.csv("master.csv", stringsAsFactors = FALSE)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex)
master_data <- read.csv("master.csv", stringsAsFactors = FALSE)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
arrange(year)
female_only <- master_data %>%
filter(sex == "female") %>%
group_by(year)
View(female_only)
female_only <- master_data %>%
filter(sex == "female") %>%
group_by(year) %>%
summarise(suicides_no = sum(suicides_no))
View(female_only)
male_only <- master_data %>%
filter(sex == "male") %>%
group_by(year) %>%
summarise(suicides_no = sum(suicides_no))
View(male_only)
female_only <- master_data %>%
filter(sex == "female") %>%
group_by(year) %>%
summarise(suicides_no = sum(suicides_no)) %>%
mutate(sex = "female")
final_df <- bind_rows(male_only, female_only)
male_only <- master_data %>%
filter(sex == "male") %>%
group_by(year) %>%
summarise(suicides_no = sum(suicides_no)) %>%
mutate(sex = "male")
View(final_df)
final_df <- bind_rows(male_only, female_only)
final_df <- bind_rows(male_only, female_only) %>%
arrange(year)
View(final_df)
draw_plot <- function() {
ggplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
geom_smooth(mapping = aes(x = year, y = suicides_no)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Case") +
labs(color = "Gender: ")
}
draw_plot <- function() {
ggplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
geom_smooth(mapping = aes(x = year, y = suicides_no)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Case") +
labs(color = "Gender: ")
return()
}
library(ggplot2)
library(dplyr)
library(tidyr)
master_data <- read.csv("master.csv", stringsAsFactors = FALSE)
master_data <- master_data %>%
filter(suicides_no != "0") %>%
select(year, suicides_no, sex) %>%
arrange(year)
female_only <- master_data %>%
filter(sex == "female") %>%
group_by(year) %>%
summarise(suicides_no = sum(suicides_no)) %>%
mutate(sex = "female")
male_only <- master_data %>%
filter(sex == "male") %>%
group_by(year) %>%
summarise(suicides_no = sum(suicides_no)) %>%
mutate(sex = "male")
final_df <- bind_rows(male_only, female_only) %>%
arrange(year)
draw_plot <- function() {
ggplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
geom_smooth(mapping = aes(x = year, y = suicides_no)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Cases") +
labs(color = "Gender: ")
return()
}
gplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
geom_smooth(mapping = aes(x = year, y = suicides_no)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Cases") +
labs(color = "Gender: ")
ggplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
geom_smooth(mapping = aes(x = year, y = suicides_no)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Cases") +
labs(color = "Gender: ")
draw_plot <- function() {
ggplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Cases") +
labs(color = "Gender: ")
return()
}
draw_plot <- function() {
ggplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Cases") +
labs(color = "Gender: ")
return()
}
draw_plot()
draw_plot <- function() {
ggplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Cases") +
labs(color = "Gender: ")
return()
}
plot <- draw_plot()
ggplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Cases") +
labs(color = "Gender: ")
return()
ggplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Cases") +
labs(color = "Gender: ")
female_only <- master_data %>%
filter(sex == "female") %>%
group_by(year) %>%
summarise(suicides_no = sum(suicides_no)) %>%
mutate(sex = "Female")
male_only <- master_data %>%
filter(sex == "male") %>%
group_by(year) %>%
summarise(suicides_no = sum(suicides_no)) %>%
mutate(sex = "Male")
final_df <- bind_rows(male_only, female_only) %>%
arrange(year)
ggplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Cases") +
labs(color = "Gender: ")
plot <- draw_plot()
draw_plot <- function() {
ggplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Cases") +
labs(color = "Gender: ")
}
plot <- draw_plot()
View(plot)
draw_plot <- function() {
ggplot(data = final_df) +
geom_point(mapping = aes(x = year, y = suicides_no, color = sex)) +
ggtitle("Suicides report in the world over the last 40 years") +
scale_x_continuous(name = "Year") +
scale_y_continuous(name = "Suicide Cases") +
labs(color = "Gender: ")
}
draw_plot()
library(ggplot2)
setwd("~/Desktop/UW/Autumn 2019/INFO 201/extra-credit")
source('analysis.R')
draw_plot
draw_plot()
draw_plot()
View(summary_1_to_100)
View(master_data)
